// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: meshmesh/meshmesh.proto

package meshmesh

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type HelloRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{0}
}

// The response message containing the greetings
type HelloReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelloReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NodeInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfoRequest) Reset() {
	*x = NodeInfoRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoRequest) ProtoMessage() {}

func (x *NodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoRequest.ProtoReflect.Descriptor instead.
func (*NodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{2}
}

func (x *NodeInfoRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NodeInfoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Channel       uint32                 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Rev           string                 `protobuf:"bytes,4,opt,name=rev,proto3" json:"rev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfoReply) Reset() {
	*x = NodeInfoReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoReply) ProtoMessage() {}

func (x *NodeInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoReply.ProtoReflect.Descriptor instead.
func (*NodeInfoReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfoReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeInfoReply) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NodeInfoReply) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *NodeInfoReply) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

type NodeRebootRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeRebootRequest) Reset() {
	*x = NodeRebootRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeRebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRebootRequest) ProtoMessage() {}

func (x *NodeRebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRebootRequest.ProtoReflect.Descriptor instead.
func (*NodeRebootRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{4}
}

func (x *NodeRebootRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NodeRebootReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeRebootReply) Reset() {
	*x = NodeRebootReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeRebootReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRebootReply) ProtoMessage() {}

func (x *NodeRebootReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRebootReply.ProtoReflect.Descriptor instead.
func (*NodeRebootReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{5}
}

func (x *NodeRebootReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type BindClearRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindClearRequest) Reset() {
	*x = BindClearRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindClearRequest) ProtoMessage() {}

func (x *BindClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindClearRequest.ProtoReflect.Descriptor instead.
func (*BindClearRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{6}
}

func (x *BindClearRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BindClearReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindClearReply) Reset() {
	*x = BindClearReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindClearReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindClearReply) ProtoMessage() {}

func (x *BindClearReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindClearReply.ProtoReflect.Descriptor instead.
func (*BindClearReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{7}
}

func (x *BindClearReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetTagRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagRequest) Reset() {
	*x = SetTagRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagRequest) ProtoMessage() {}

func (x *SetTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagRequest.ProtoReflect.Descriptor instead.
func (*SetTagRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{8}
}

func (x *SetTagRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type SetTagReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagReply) Reset() {
	*x = SetTagReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagReply) ProtoMessage() {}

func (x *SetTagReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagReply.ProtoReflect.Descriptor instead.
func (*SetTagReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{9}
}

func (x *SetTagReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Channel       uint32                 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetChannelRequest) Reset() {
	*x = SetChannelRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelRequest) ProtoMessage() {}

func (x *SetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelRequest.ProtoReflect.Descriptor instead.
func (*SetChannelRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{10}
}

func (x *SetChannelRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetChannelRequest) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type SetChannelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetChannelReply) Reset() {
	*x = SetChannelReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelReply) ProtoMessage() {}

func (x *SetChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelReply.ProtoReflect.Descriptor instead.
func (*SetChannelReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{11}
}

func (x *SetChannelReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkNodesRequest) Reset() {
	*x = NetworkNodesRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkNodesRequest) ProtoMessage() {}

func (x *NetworkNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkNodesRequest.ProtoReflect.Descriptor instead.
func (*NetworkNodesRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{12}
}

type NetworkNodesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []uint32               `protobuf:"varint,1,rep,packed,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkNodesReply) Reset() {
	*x = NetworkNodesReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkNodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkNodesReply) ProtoMessage() {}

func (x *NetworkNodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkNodesReply.ProtoReflect.Descriptor instead.
func (*NetworkNodesReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkNodesReply) GetNodes() []uint32 {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_meshmesh_meshmesh_proto protoreflect.FileDescriptor

var file_meshmesh_meshmesh_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x21, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x76, 0x22, 0x23, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x3d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2b,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x32, 0xe7, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x12, 0x3a,
	0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x16, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x44, 0x0a, 0x13, 0x6c,
	0x65, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65,
	0x73, 0x68, 0x42, 0x0d, 0x4d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x6c, 0x65, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6e, 0x65, 0x74, 0x2f,
	0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73,
	0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshmesh_meshmesh_proto_rawDescOnce sync.Once
	file_meshmesh_meshmesh_proto_rawDescData = file_meshmesh_meshmesh_proto_rawDesc
)

func file_meshmesh_meshmesh_proto_rawDescGZIP() []byte {
	file_meshmesh_meshmesh_proto_rawDescOnce.Do(func() {
		file_meshmesh_meshmesh_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshmesh_meshmesh_proto_rawDescData)
	})
	return file_meshmesh_meshmesh_proto_rawDescData
}

var file_meshmesh_meshmesh_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_meshmesh_meshmesh_proto_goTypes = []any{
	(*HelloRequest)(nil),        // 0: meshmesh.HelloRequest
	(*HelloReply)(nil),          // 1: meshmesh.HelloReply
	(*NodeInfoRequest)(nil),     // 2: meshmesh.NodeInfoRequest
	(*NodeInfoReply)(nil),       // 3: meshmesh.NodeInfoReply
	(*NodeRebootRequest)(nil),   // 4: meshmesh.NodeRebootRequest
	(*NodeRebootReply)(nil),     // 5: meshmesh.NodeRebootReply
	(*BindClearRequest)(nil),    // 6: meshmesh.BindClearRequest
	(*BindClearReply)(nil),      // 7: meshmesh.BindClearReply
	(*SetTagRequest)(nil),       // 8: meshmesh.SetTagRequest
	(*SetTagReply)(nil),         // 9: meshmesh.SetTagReply
	(*SetChannelRequest)(nil),   // 10: meshmesh.SetChannelRequest
	(*SetChannelReply)(nil),     // 11: meshmesh.SetChannelReply
	(*NetworkNodesRequest)(nil), // 12: meshmesh.NetworkNodesRequest
	(*NetworkNodesReply)(nil),   // 13: meshmesh.NetworkNodesReply
}
var file_meshmesh_meshmesh_proto_depIdxs = []int32{
	0,  // 0: meshmesh.Meshmesh.SayHello:input_type -> meshmesh.HelloRequest
	2,  // 1: meshmesh.Meshmesh.NodeInfo:input_type -> meshmesh.NodeInfoRequest
	4,  // 2: meshmesh.Meshmesh.NodeReboot:input_type -> meshmesh.NodeRebootRequest
	6,  // 3: meshmesh.Meshmesh.BindClear:input_type -> meshmesh.BindClearRequest
	8,  // 4: meshmesh.Meshmesh.SetTag:input_type -> meshmesh.SetTagRequest
	10, // 5: meshmesh.Meshmesh.SetChannel:input_type -> meshmesh.SetChannelRequest
	12, // 6: meshmesh.Meshmesh.NetworkNodes:input_type -> meshmesh.NetworkNodesRequest
	1,  // 7: meshmesh.Meshmesh.SayHello:output_type -> meshmesh.HelloReply
	3,  // 8: meshmesh.Meshmesh.NodeInfo:output_type -> meshmesh.NodeInfoReply
	5,  // 9: meshmesh.Meshmesh.NodeReboot:output_type -> meshmesh.NodeRebootReply
	7,  // 10: meshmesh.Meshmesh.BindClear:output_type -> meshmesh.BindClearReply
	9,  // 11: meshmesh.Meshmesh.SetTag:output_type -> meshmesh.SetTagReply
	11, // 12: meshmesh.Meshmesh.SetChannel:output_type -> meshmesh.SetChannelReply
	13, // 13: meshmesh.Meshmesh.NetworkNodes:output_type -> meshmesh.NetworkNodesReply
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_meshmesh_meshmesh_proto_init() }
func file_meshmesh_meshmesh_proto_init() {
	if File_meshmesh_meshmesh_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshmesh_meshmesh_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meshmesh_meshmesh_proto_goTypes,
		DependencyIndexes: file_meshmesh_meshmesh_proto_depIdxs,
		MessageInfos:      file_meshmesh_meshmesh_proto_msgTypes,
	}.Build()
	File_meshmesh_meshmesh_proto = out.File
	file_meshmesh_meshmesh_proto_rawDesc = nil
	file_meshmesh_meshmesh_proto_goTypes = nil
	file_meshmesh_meshmesh_proto_depIdxs = nil
}
