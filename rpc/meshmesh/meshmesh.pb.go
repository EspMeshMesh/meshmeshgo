// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: meshmesh/meshmesh.proto

package meshmesh

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityType int32

const (
	EntityType_ALL           EntityType = 0
	EntityType_SENSOR        EntityType = 1
	EntityType_BINARY_SENSOR EntityType = 2
	EntityType_SWITCH        EntityType = 3
	EntityType_LIGHT         EntityType = 4
	EntityType_TEXT_SENSOR   EntityType = 5
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "ALL",
		1: "SENSOR",
		2: "BINARY_SENSOR",
		3: "SWITCH",
		4: "LIGHT",
		5: "TEXT_SENSOR",
	}
	EntityType_value = map[string]int32{
		"ALL":           0,
		"SENSOR":        1,
		"BINARY_SENSOR": 2,
		"SWITCH":        3,
		"LIGHT":         4,
		"TEXT_SENSOR":   5,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshmesh_meshmesh_proto_enumTypes[0].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_meshmesh_meshmesh_proto_enumTypes[0]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{0}
}

// The request message containing the user's name.
type HelloRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{0}
}

// The response message containing the greetings
type HelloReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelloReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NodeInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfoRequest) Reset() {
	*x = NodeInfoRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoRequest) ProtoMessage() {}

func (x *NodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoRequest.ProtoReflect.Descriptor instead.
func (*NodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{2}
}

func (x *NodeInfoRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NodeInfoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Channel       uint32                 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Rev           string                 `protobuf:"bytes,4,opt,name=rev,proto3" json:"rev,omitempty"`
	IsAssociated  bool                   `protobuf:"varint,5,opt,name=isAssociated,proto3" json:"isAssociated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfoReply) Reset() {
	*x = NodeInfoReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoReply) ProtoMessage() {}

func (x *NodeInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoReply.ProtoReflect.Descriptor instead.
func (*NodeInfoReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfoReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeInfoReply) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NodeInfoReply) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *NodeInfoReply) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *NodeInfoReply) GetIsAssociated() bool {
	if x != nil {
		return x.IsAssociated
	}
	return false
}

type NodeRebootRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeRebootRequest) Reset() {
	*x = NodeRebootRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeRebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRebootRequest) ProtoMessage() {}

func (x *NodeRebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRebootRequest.ProtoReflect.Descriptor instead.
func (*NodeRebootRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{4}
}

func (x *NodeRebootRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NodeRebootReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeRebootReply) Reset() {
	*x = NodeRebootReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeRebootReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRebootReply) ProtoMessage() {}

func (x *NodeRebootReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRebootReply.ProtoReflect.Descriptor instead.
func (*NodeRebootReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{5}
}

func (x *NodeRebootReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type BindClearRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindClearRequest) Reset() {
	*x = BindClearRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindClearRequest) ProtoMessage() {}

func (x *BindClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindClearRequest.ProtoReflect.Descriptor instead.
func (*BindClearRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{6}
}

func (x *BindClearRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BindClearReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindClearReply) Reset() {
	*x = BindClearReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindClearReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindClearReply) ProtoMessage() {}

func (x *BindClearReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindClearReply.ProtoReflect.Descriptor instead.
func (*BindClearReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{7}
}

func (x *BindClearReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetTagRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagRequest) Reset() {
	*x = SetTagRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagRequest) ProtoMessage() {}

func (x *SetTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagRequest.ProtoReflect.Descriptor instead.
func (*SetTagRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{8}
}

func (x *SetTagRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type SetTagReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagReply) Reset() {
	*x = SetTagReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagReply) ProtoMessage() {}

func (x *SetTagReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagReply.ProtoReflect.Descriptor instead.
func (*SetTagReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{9}
}

func (x *SetTagReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Channel       uint32                 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetChannelRequest) Reset() {
	*x = SetChannelRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelRequest) ProtoMessage() {}

func (x *SetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelRequest.ProtoReflect.Descriptor instead.
func (*SetChannelRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{10}
}

func (x *SetChannelRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetChannelRequest) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type SetChannelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetChannelReply) Reset() {
	*x = SetChannelReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelReply) ProtoMessage() {}

func (x *SetChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelReply.ProtoReflect.Descriptor instead.
func (*SetChannelReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{11}
}

func (x *SetChannelReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type EntitiesCountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntitiesCountRequest) Reset() {
	*x = EntitiesCountRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitiesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitiesCountRequest) ProtoMessage() {}

func (x *EntitiesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitiesCountRequest.ProtoReflect.Descriptor instead.
func (*EntitiesCountRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{12}
}

func (x *EntitiesCountRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EntitiesCountReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	All           uint32                 `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Sensors       uint32                 `protobuf:"varint,2,opt,name=sensors,proto3" json:"sensors,omitempty"`
	BinarySensors uint32                 `protobuf:"varint,3,opt,name=binarySensors,proto3" json:"binarySensors,omitempty"`
	Switches      uint32                 `protobuf:"varint,4,opt,name=switches,proto3" json:"switches,omitempty"`
	Lights        uint32                 `protobuf:"varint,5,opt,name=lights,proto3" json:"lights,omitempty"`
	TextSensors   uint32                 `protobuf:"varint,6,opt,name=textSensors,proto3" json:"textSensors,omitempty"`
	AnalogSensors uint32                 `protobuf:"varint,7,opt,name=analogSensors,proto3" json:"analogSensors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntitiesCountReply) Reset() {
	*x = EntitiesCountReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitiesCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitiesCountReply) ProtoMessage() {}

func (x *EntitiesCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitiesCountReply.ProtoReflect.Descriptor instead.
func (*EntitiesCountReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{13}
}

func (x *EntitiesCountReply) GetAll() uint32 {
	if x != nil {
		return x.All
	}
	return 0
}

func (x *EntitiesCountReply) GetSensors() uint32 {
	if x != nil {
		return x.Sensors
	}
	return 0
}

func (x *EntitiesCountReply) GetBinarySensors() uint32 {
	if x != nil {
		return x.BinarySensors
	}
	return 0
}

func (x *EntitiesCountReply) GetSwitches() uint32 {
	if x != nil {
		return x.Switches
	}
	return 0
}

func (x *EntitiesCountReply) GetLights() uint32 {
	if x != nil {
		return x.Lights
	}
	return 0
}

func (x *EntitiesCountReply) GetTextSensors() uint32 {
	if x != nil {
		return x.TextSensors
	}
	return 0
}

func (x *EntitiesCountReply) GetAnalogSensors() uint32 {
	if x != nil {
		return x.AnalogSensors
	}
	return 0
}

type EntityHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Service       EntityType             `protobuf:"varint,2,opt,name=service,proto3,enum=meshmesh.EntityType" json:"service,omitempty"`
	Index         uint32                 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityHashRequest) Reset() {
	*x = EntityHashRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityHashRequest) ProtoMessage() {}

func (x *EntityHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityHashRequest.ProtoReflect.Descriptor instead.
func (*EntityHashRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{14}
}

func (x *EntityHashRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EntityHashRequest) GetService() EntityType {
	if x != nil {
		return x.Service
	}
	return EntityType_ALL
}

func (x *EntityHashRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type EntityHashReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash          uint32                 `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Info          string                 `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityHashReply) Reset() {
	*x = EntityHashReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityHashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityHashReply) ProtoMessage() {}

func (x *EntityHashReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityHashReply.ProtoReflect.Descriptor instead.
func (*EntityHashReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{15}
}

func (x *EntityHashReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EntityHashReply) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *EntityHashReply) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type GetEntityStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Service       EntityType             `protobuf:"varint,2,opt,name=service,proto3,enum=meshmesh.EntityType" json:"service,omitempty"`
	Hash          uint32                 `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntityStateRequest) Reset() {
	*x = GetEntityStateRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntityStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityStateRequest) ProtoMessage() {}

func (x *GetEntityStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityStateRequest.ProtoReflect.Descriptor instead.
func (*GetEntityStateRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{16}
}

func (x *GetEntityStateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetEntityStateRequest) GetService() EntityType {
	if x != nil {
		return x.Service
	}
	return EntityType_ALL
}

func (x *GetEntityStateRequest) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type GetEntityStateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         uint32                 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntityStateReply) Reset() {
	*x = GetEntityStateReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntityStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityStateReply) ProtoMessage() {}

func (x *GetEntityStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityStateReply.ProtoReflect.Descriptor instead.
func (*GetEntityStateReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{17}
}

func (x *GetEntityStateReply) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type SetEntityStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Service       EntityType             `protobuf:"varint,2,opt,name=service,proto3,enum=meshmesh.EntityType" json:"service,omitempty"`
	Hash          uint32                 `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	State         uint32                 `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetEntityStateRequest) Reset() {
	*x = SetEntityStateRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEntityStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEntityStateRequest) ProtoMessage() {}

func (x *SetEntityStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEntityStateRequest.ProtoReflect.Descriptor instead.
func (*SetEntityStateRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{18}
}

func (x *SetEntityStateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetEntityStateRequest) GetService() EntityType {
	if x != nil {
		return x.Service
	}
	return EntityType_ALL
}

func (x *SetEntityStateRequest) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *SetEntityStateRequest) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type SetEntityStateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetEntityStateReply) Reset() {
	*x = SetEntityStateReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEntityStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEntityStateReply) ProtoMessage() {}

func (x *SetEntityStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEntityStateReply.ProtoReflect.Descriptor instead.
func (*SetEntityStateReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{19}
}

func (x *SetEntityStateReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ExecuteDiscoveryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NumSlots      *uint32                `protobuf:"varint,2,opt,name=num_slots,json=numSlots,proto3,oneof" json:"num_slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteDiscoveryRequest) Reset() {
	*x = ExecuteDiscoveryRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteDiscoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteDiscoveryRequest) ProtoMessage() {}

func (x *ExecuteDiscoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteDiscoveryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteDiscoveryRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{20}
}

func (x *ExecuteDiscoveryRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecuteDiscoveryRequest) GetNumSlots() uint32 {
	if x != nil && x.NumSlots != nil {
		return *x.NumSlots
	}
	return 0
}

type ExecuteDiscoveryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteDiscoveryReply) Reset() {
	*x = ExecuteDiscoveryReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteDiscoveryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteDiscoveryReply) ProtoMessage() {}

func (x *ExecuteDiscoveryReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteDiscoveryReply.ProtoReflect.Descriptor instead.
func (*ExecuteDiscoveryReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{21}
}

func (x *ExecuteDiscoveryReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NetworkNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkNodesRequest) Reset() {
	*x = NetworkNodesRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkNodesRequest) ProtoMessage() {}

func (x *NetworkNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkNodesRequest.ProtoReflect.Descriptor instead.
func (*NetworkNodesRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{22}
}

type NetworkNodesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*NetworkNode         `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkNodesReply) Reset() {
	*x = NetworkNodesReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkNodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkNodesReply) ProtoMessage() {}

func (x *NetworkNodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkNodesReply.ProtoReflect.Descriptor instead.
func (*NetworkNodesReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{23}
}

func (x *NetworkNodesReply) GetNodes() []*NetworkNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NetworkEdgesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkEdgesRequest) Reset() {
	*x = NetworkEdgesRequest{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkEdgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEdgesRequest) ProtoMessage() {}

func (x *NetworkEdgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEdgesRequest.ProtoReflect.Descriptor instead.
func (*NetworkEdgesRequest) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{24}
}

type NetworkEdgesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Edges         []*NetworkEdge         `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkEdgesReply) Reset() {
	*x = NetworkEdgesReply{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkEdgesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEdgesReply) ProtoMessage() {}

func (x *NetworkEdgesReply) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEdgesReply.ProtoReflect.Descriptor instead.
func (*NetworkEdgesReply) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{25}
}

func (x *NetworkEdgesReply) GetEdges() []*NetworkEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type NetworkNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Inuse         bool                   `protobuf:"varint,3,opt,name=inuse,proto3" json:"inuse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkNode) Reset() {
	*x = NetworkNode{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkNode) ProtoMessage() {}

func (x *NetworkNode) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkNode.ProtoReflect.Descriptor instead.
func (*NetworkNode) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{26}
}

func (x *NetworkNode) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NetworkNode) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NetworkNode) GetInuse() bool {
	if x != nil {
		return x.Inuse
	}
	return false
}

type NetworkEdge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From          uint32                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint32                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Weight        float32                `protobuf:"fixed32,4,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkEdge) Reset() {
	*x = NetworkEdge{}
	mi := &file_meshmesh_meshmesh_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEdge) ProtoMessage() {}

func (x *NetworkEdge) ProtoReflect() protoreflect.Message {
	mi := &file_meshmesh_meshmesh_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEdge.ProtoReflect.Descriptor instead.
func (*NetworkEdge) Descriptor() ([]byte, []int) {
	return file_meshmesh_meshmesh_proto_rawDescGZIP(), []int{27}
}

func (x *NetworkEdge) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NetworkEdge) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *NetworkEdge) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *NetworkEdge) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_meshmesh_meshmesh_proto protoreflect.FileDescriptor

var file_meshmesh_meshmesh_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x21, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x76, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x0e,
	0x42, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x27, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x26, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x69, 0x0a,
	0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x49, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x59, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x31, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x15, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x40, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2a, 0x5c, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x4e, 0x41, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x10, 0x05, 0x32, 0xd0, 0x07, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x12,
	0x3a, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x16, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x44, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x75, 0x72, 0x75, 0x2e,
	0x6e, 0x65, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x42, 0x0d, 0x4d, 0x65,
	0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x6c,
	0x65, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x65, 0x73, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_meshmesh_meshmesh_proto_rawDescOnce sync.Once
	file_meshmesh_meshmesh_proto_rawDescData []byte
)

func file_meshmesh_meshmesh_proto_rawDescGZIP() []byte {
	file_meshmesh_meshmesh_proto_rawDescOnce.Do(func() {
		file_meshmesh_meshmesh_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshmesh_meshmesh_proto_rawDesc), len(file_meshmesh_meshmesh_proto_rawDesc)))
	})
	return file_meshmesh_meshmesh_proto_rawDescData
}

var file_meshmesh_meshmesh_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshmesh_meshmesh_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_meshmesh_meshmesh_proto_goTypes = []any{
	(EntityType)(0),                 // 0: meshmesh.EntityType
	(*HelloRequest)(nil),            // 1: meshmesh.HelloRequest
	(*HelloReply)(nil),              // 2: meshmesh.HelloReply
	(*NodeInfoRequest)(nil),         // 3: meshmesh.NodeInfoRequest
	(*NodeInfoReply)(nil),           // 4: meshmesh.NodeInfoReply
	(*NodeRebootRequest)(nil),       // 5: meshmesh.NodeRebootRequest
	(*NodeRebootReply)(nil),         // 6: meshmesh.NodeRebootReply
	(*BindClearRequest)(nil),        // 7: meshmesh.BindClearRequest
	(*BindClearReply)(nil),          // 8: meshmesh.BindClearReply
	(*SetTagRequest)(nil),           // 9: meshmesh.SetTagRequest
	(*SetTagReply)(nil),             // 10: meshmesh.SetTagReply
	(*SetChannelRequest)(nil),       // 11: meshmesh.SetChannelRequest
	(*SetChannelReply)(nil),         // 12: meshmesh.SetChannelReply
	(*EntitiesCountRequest)(nil),    // 13: meshmesh.EntitiesCountRequest
	(*EntitiesCountReply)(nil),      // 14: meshmesh.EntitiesCountReply
	(*EntityHashRequest)(nil),       // 15: meshmesh.EntityHashRequest
	(*EntityHashReply)(nil),         // 16: meshmesh.EntityHashReply
	(*GetEntityStateRequest)(nil),   // 17: meshmesh.GetEntityStateRequest
	(*GetEntityStateReply)(nil),     // 18: meshmesh.GetEntityStateReply
	(*SetEntityStateRequest)(nil),   // 19: meshmesh.SetEntityStateRequest
	(*SetEntityStateReply)(nil),     // 20: meshmesh.SetEntityStateReply
	(*ExecuteDiscoveryRequest)(nil), // 21: meshmesh.ExecuteDiscoveryRequest
	(*ExecuteDiscoveryReply)(nil),   // 22: meshmesh.ExecuteDiscoveryReply
	(*NetworkNodesRequest)(nil),     // 23: meshmesh.NetworkNodesRequest
	(*NetworkNodesReply)(nil),       // 24: meshmesh.NetworkNodesReply
	(*NetworkEdgesRequest)(nil),     // 25: meshmesh.NetworkEdgesRequest
	(*NetworkEdgesReply)(nil),       // 26: meshmesh.NetworkEdgesReply
	(*NetworkNode)(nil),             // 27: meshmesh.NetworkNode
	(*NetworkEdge)(nil),             // 28: meshmesh.NetworkEdge
}
var file_meshmesh_meshmesh_proto_depIdxs = []int32{
	0,  // 0: meshmesh.EntityHashRequest.service:type_name -> meshmesh.EntityType
	0,  // 1: meshmesh.GetEntityStateRequest.service:type_name -> meshmesh.EntityType
	0,  // 2: meshmesh.SetEntityStateRequest.service:type_name -> meshmesh.EntityType
	27, // 3: meshmesh.NetworkNodesReply.nodes:type_name -> meshmesh.NetworkNode
	28, // 4: meshmesh.NetworkEdgesReply.edges:type_name -> meshmesh.NetworkEdge
	1,  // 5: meshmesh.Meshmesh.SayHello:input_type -> meshmesh.HelloRequest
	3,  // 6: meshmesh.Meshmesh.NodeInfo:input_type -> meshmesh.NodeInfoRequest
	5,  // 7: meshmesh.Meshmesh.NodeReboot:input_type -> meshmesh.NodeRebootRequest
	7,  // 8: meshmesh.Meshmesh.BindClear:input_type -> meshmesh.BindClearRequest
	9,  // 9: meshmesh.Meshmesh.SetTag:input_type -> meshmesh.SetTagRequest
	11, // 10: meshmesh.Meshmesh.SetChannel:input_type -> meshmesh.SetChannelRequest
	13, // 11: meshmesh.Meshmesh.EntitiesCount:input_type -> meshmesh.EntitiesCountRequest
	15, // 12: meshmesh.Meshmesh.EntityHash:input_type -> meshmesh.EntityHashRequest
	17, // 13: meshmesh.Meshmesh.GetEntityState:input_type -> meshmesh.GetEntityStateRequest
	19, // 14: meshmesh.Meshmesh.SetEntityState:input_type -> meshmesh.SetEntityStateRequest
	21, // 15: meshmesh.Meshmesh.ExecuteDiscovery:input_type -> meshmesh.ExecuteDiscoveryRequest
	23, // 16: meshmesh.Meshmesh.NetworkNodes:input_type -> meshmesh.NetworkNodesRequest
	25, // 17: meshmesh.Meshmesh.NetworkEdges:input_type -> meshmesh.NetworkEdgesRequest
	2,  // 18: meshmesh.Meshmesh.SayHello:output_type -> meshmesh.HelloReply
	4,  // 19: meshmesh.Meshmesh.NodeInfo:output_type -> meshmesh.NodeInfoReply
	6,  // 20: meshmesh.Meshmesh.NodeReboot:output_type -> meshmesh.NodeRebootReply
	8,  // 21: meshmesh.Meshmesh.BindClear:output_type -> meshmesh.BindClearReply
	10, // 22: meshmesh.Meshmesh.SetTag:output_type -> meshmesh.SetTagReply
	12, // 23: meshmesh.Meshmesh.SetChannel:output_type -> meshmesh.SetChannelReply
	14, // 24: meshmesh.Meshmesh.EntitiesCount:output_type -> meshmesh.EntitiesCountReply
	16, // 25: meshmesh.Meshmesh.EntityHash:output_type -> meshmesh.EntityHashReply
	18, // 26: meshmesh.Meshmesh.GetEntityState:output_type -> meshmesh.GetEntityStateReply
	20, // 27: meshmesh.Meshmesh.SetEntityState:output_type -> meshmesh.SetEntityStateReply
	22, // 28: meshmesh.Meshmesh.ExecuteDiscovery:output_type -> meshmesh.ExecuteDiscoveryReply
	24, // 29: meshmesh.Meshmesh.NetworkNodes:output_type -> meshmesh.NetworkNodesReply
	26, // 30: meshmesh.Meshmesh.NetworkEdges:output_type -> meshmesh.NetworkEdgesReply
	18, // [18:31] is the sub-list for method output_type
	5,  // [5:18] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_meshmesh_meshmesh_proto_init() }
func file_meshmesh_meshmesh_proto_init() {
	if File_meshmesh_meshmesh_proto != nil {
		return
	}
	file_meshmesh_meshmesh_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshmesh_meshmesh_proto_rawDesc), len(file_meshmesh_meshmesh_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meshmesh_meshmesh_proto_goTypes,
		DependencyIndexes: file_meshmesh_meshmesh_proto_depIdxs,
		EnumInfos:         file_meshmesh_meshmesh_proto_enumTypes,
		MessageInfos:      file_meshmesh_meshmesh_proto_msgTypes,
	}.Build()
	File_meshmesh_meshmesh_proto = out.File
	file_meshmesh_meshmesh_proto_goTypes = nil
	file_meshmesh_meshmesh_proto_depIdxs = nil
}
