// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: meshmesh/meshmesh.proto

package meshmesh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Meshmesh_SayHello_FullMethodName             = "/meshmesh.Meshmesh/SayHello"
	Meshmesh_NodeInfo_FullMethodName             = "/meshmesh.Meshmesh/NodeInfo"
	Meshmesh_NodeReboot_FullMethodName           = "/meshmesh.Meshmesh/NodeReboot"
	Meshmesh_BindClear_FullMethodName            = "/meshmesh.Meshmesh/BindClear"
	Meshmesh_SetTag_FullMethodName               = "/meshmesh.Meshmesh/SetTag"
	Meshmesh_SetChannel_FullMethodName           = "/meshmesh.Meshmesh/SetChannel"
	Meshmesh_EntitiesCount_FullMethodName        = "/meshmesh.Meshmesh/EntitiesCount"
	Meshmesh_EntityHash_FullMethodName           = "/meshmesh.Meshmesh/EntityHash"
	Meshmesh_GetEntityState_FullMethodName       = "/meshmesh.Meshmesh/GetEntityState"
	Meshmesh_SetEntityState_FullMethodName       = "/meshmesh.Meshmesh/SetEntityState"
	Meshmesh_ExecuteDiscovery_FullMethodName     = "/meshmesh.Meshmesh/ExecuteDiscovery"
	Meshmesh_NetworkNodes_FullMethodName         = "/meshmesh.Meshmesh/NetworkNodes"
	Meshmesh_NetworkEdges_FullMethodName         = "/meshmesh.Meshmesh/NetworkEdges"
	Meshmesh_NetworkNodeConfigure_FullMethodName = "/meshmesh.Meshmesh/NetworkNodeConfigure"
	Meshmesh_NetworkNodeDelete_FullMethodName    = "/meshmesh.Meshmesh/NetworkNodeDelete"
)

// MeshmeshClient is the client API for Meshmesh service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type MeshmeshClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoReply, error)
	NodeReboot(ctx context.Context, in *NodeRebootRequest, opts ...grpc.CallOption) (*NodeRebootReply, error)
	BindClear(ctx context.Context, in *BindClearRequest, opts ...grpc.CallOption) (*BindClearReply, error)
	SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagReply, error)
	SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*SetChannelReply, error)
	EntitiesCount(ctx context.Context, in *EntitiesCountRequest, opts ...grpc.CallOption) (*EntitiesCountReply, error)
	EntityHash(ctx context.Context, in *EntityHashRequest, opts ...grpc.CallOption) (*EntityHashReply, error)
	GetEntityState(ctx context.Context, in *GetEntityStateRequest, opts ...grpc.CallOption) (*GetEntityStateReply, error)
	SetEntityState(ctx context.Context, in *SetEntityStateRequest, opts ...grpc.CallOption) (*SetEntityStateReply, error)
	ExecuteDiscovery(ctx context.Context, in *ExecuteDiscoveryRequest, opts ...grpc.CallOption) (*ExecuteDiscoveryReply, error)
	NetworkNodes(ctx context.Context, in *NetworkNodesRequest, opts ...grpc.CallOption) (*NetworkNodesReply, error)
	NetworkEdges(ctx context.Context, in *NetworkEdgesRequest, opts ...grpc.CallOption) (*NetworkEdgesReply, error)
	NetworkNodeConfigure(ctx context.Context, in *NetworkNodeConfigureRequest, opts ...grpc.CallOption) (*NetworkNodeConfigureReply, error)
	NetworkNodeDelete(ctx context.Context, in *NetworkNodeDeleteRequest, opts ...grpc.CallOption) (*NetworkNodeDeleteReply, error)
}

type meshmeshClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshmeshClient(cc grpc.ClientConnInterface) MeshmeshClient {
	return &meshmeshClient{cc}
}

func (c *meshmeshClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Meshmesh_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfoReply)
	err := c.cc.Invoke(ctx, Meshmesh_NodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) NodeReboot(ctx context.Context, in *NodeRebootRequest, opts ...grpc.CallOption) (*NodeRebootReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeRebootReply)
	err := c.cc.Invoke(ctx, Meshmesh_NodeReboot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) BindClear(ctx context.Context, in *BindClearRequest, opts ...grpc.CallOption) (*BindClearReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindClearReply)
	err := c.cc.Invoke(ctx, Meshmesh_BindClear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTagReply)
	err := c.cc.Invoke(ctx, Meshmesh_SetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*SetChannelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetChannelReply)
	err := c.cc.Invoke(ctx, Meshmesh_SetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) EntitiesCount(ctx context.Context, in *EntitiesCountRequest, opts ...grpc.CallOption) (*EntitiesCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntitiesCountReply)
	err := c.cc.Invoke(ctx, Meshmesh_EntitiesCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) EntityHash(ctx context.Context, in *EntityHashRequest, opts ...grpc.CallOption) (*EntityHashReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityHashReply)
	err := c.cc.Invoke(ctx, Meshmesh_EntityHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) GetEntityState(ctx context.Context, in *GetEntityStateRequest, opts ...grpc.CallOption) (*GetEntityStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityStateReply)
	err := c.cc.Invoke(ctx, Meshmesh_GetEntityState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) SetEntityState(ctx context.Context, in *SetEntityStateRequest, opts ...grpc.CallOption) (*SetEntityStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEntityStateReply)
	err := c.cc.Invoke(ctx, Meshmesh_SetEntityState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) ExecuteDiscovery(ctx context.Context, in *ExecuteDiscoveryRequest, opts ...grpc.CallOption) (*ExecuteDiscoveryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteDiscoveryReply)
	err := c.cc.Invoke(ctx, Meshmesh_ExecuteDiscovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) NetworkNodes(ctx context.Context, in *NetworkNodesRequest, opts ...grpc.CallOption) (*NetworkNodesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkNodesReply)
	err := c.cc.Invoke(ctx, Meshmesh_NetworkNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) NetworkEdges(ctx context.Context, in *NetworkEdgesRequest, opts ...grpc.CallOption) (*NetworkEdgesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkEdgesReply)
	err := c.cc.Invoke(ctx, Meshmesh_NetworkEdges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) NetworkNodeConfigure(ctx context.Context, in *NetworkNodeConfigureRequest, opts ...grpc.CallOption) (*NetworkNodeConfigureReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkNodeConfigureReply)
	err := c.cc.Invoke(ctx, Meshmesh_NetworkNodeConfigure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshmeshClient) NetworkNodeDelete(ctx context.Context, in *NetworkNodeDeleteRequest, opts ...grpc.CallOption) (*NetworkNodeDeleteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkNodeDeleteReply)
	err := c.cc.Invoke(ctx, Meshmesh_NetworkNodeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshmeshServer is the server API for Meshmesh service.
// All implementations must embed UnimplementedMeshmeshServer
// for forward compatibility.
//
// The greeting service definition.
type MeshmeshServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoReply, error)
	NodeReboot(context.Context, *NodeRebootRequest) (*NodeRebootReply, error)
	BindClear(context.Context, *BindClearRequest) (*BindClearReply, error)
	SetTag(context.Context, *SetTagRequest) (*SetTagReply, error)
	SetChannel(context.Context, *SetChannelRequest) (*SetChannelReply, error)
	EntitiesCount(context.Context, *EntitiesCountRequest) (*EntitiesCountReply, error)
	EntityHash(context.Context, *EntityHashRequest) (*EntityHashReply, error)
	GetEntityState(context.Context, *GetEntityStateRequest) (*GetEntityStateReply, error)
	SetEntityState(context.Context, *SetEntityStateRequest) (*SetEntityStateReply, error)
	ExecuteDiscovery(context.Context, *ExecuteDiscoveryRequest) (*ExecuteDiscoveryReply, error)
	NetworkNodes(context.Context, *NetworkNodesRequest) (*NetworkNodesReply, error)
	NetworkEdges(context.Context, *NetworkEdgesRequest) (*NetworkEdgesReply, error)
	NetworkNodeConfigure(context.Context, *NetworkNodeConfigureRequest) (*NetworkNodeConfigureReply, error)
	NetworkNodeDelete(context.Context, *NetworkNodeDeleteRequest) (*NetworkNodeDeleteReply, error)
	mustEmbedUnimplementedMeshmeshServer()
}

// UnimplementedMeshmeshServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeshmeshServer struct{}

func (UnimplementedMeshmeshServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMeshmeshServer) NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (UnimplementedMeshmeshServer) NodeReboot(context.Context, *NodeRebootRequest) (*NodeRebootReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeReboot not implemented")
}
func (UnimplementedMeshmeshServer) BindClear(context.Context, *BindClearRequest) (*BindClearReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindClear not implemented")
}
func (UnimplementedMeshmeshServer) SetTag(context.Context, *SetTagRequest) (*SetTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTag not implemented")
}
func (UnimplementedMeshmeshServer) SetChannel(context.Context, *SetChannelRequest) (*SetChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannel not implemented")
}
func (UnimplementedMeshmeshServer) EntitiesCount(context.Context, *EntitiesCountRequest) (*EntitiesCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntitiesCount not implemented")
}
func (UnimplementedMeshmeshServer) EntityHash(context.Context, *EntityHashRequest) (*EntityHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityHash not implemented")
}
func (UnimplementedMeshmeshServer) GetEntityState(context.Context, *GetEntityStateRequest) (*GetEntityStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityState not implemented")
}
func (UnimplementedMeshmeshServer) SetEntityState(context.Context, *SetEntityStateRequest) (*SetEntityStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntityState not implemented")
}
func (UnimplementedMeshmeshServer) ExecuteDiscovery(context.Context, *ExecuteDiscoveryRequest) (*ExecuteDiscoveryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDiscovery not implemented")
}
func (UnimplementedMeshmeshServer) NetworkNodes(context.Context, *NetworkNodesRequest) (*NetworkNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkNodes not implemented")
}
func (UnimplementedMeshmeshServer) NetworkEdges(context.Context, *NetworkEdgesRequest) (*NetworkEdgesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkEdges not implemented")
}
func (UnimplementedMeshmeshServer) NetworkNodeConfigure(context.Context, *NetworkNodeConfigureRequest) (*NetworkNodeConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkNodeConfigure not implemented")
}
func (UnimplementedMeshmeshServer) NetworkNodeDelete(context.Context, *NetworkNodeDeleteRequest) (*NetworkNodeDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkNodeDelete not implemented")
}
func (UnimplementedMeshmeshServer) mustEmbedUnimplementedMeshmeshServer() {}
func (UnimplementedMeshmeshServer) testEmbeddedByValue()                  {}

// UnsafeMeshmeshServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshmeshServer will
// result in compilation errors.
type UnsafeMeshmeshServer interface {
	mustEmbedUnimplementedMeshmeshServer()
}

func RegisterMeshmeshServer(s grpc.ServiceRegistrar, srv MeshmeshServer) {
	// If the following call pancis, it indicates UnimplementedMeshmeshServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Meshmesh_ServiceDesc, srv)
}

func _Meshmesh_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_NodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).NodeInfo(ctx, req.(*NodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_NodeReboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).NodeReboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_NodeReboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).NodeReboot(ctx, req.(*NodeRebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_BindClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).BindClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_BindClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).BindClear(ctx, req.(*BindClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_SetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).SetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_SetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).SetTag(ctx, req.(*SetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_SetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).SetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_SetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).SetChannel(ctx, req.(*SetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_EntitiesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).EntitiesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_EntitiesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).EntitiesCount(ctx, req.(*EntitiesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_EntityHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).EntityHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_EntityHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).EntityHash(ctx, req.(*EntityHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_GetEntityState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).GetEntityState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_GetEntityState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).GetEntityState(ctx, req.(*GetEntityStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_SetEntityState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEntityStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).SetEntityState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_SetEntityState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).SetEntityState(ctx, req.(*SetEntityStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_ExecuteDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).ExecuteDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_ExecuteDiscovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).ExecuteDiscovery(ctx, req.(*ExecuteDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_NetworkNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).NetworkNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_NetworkNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).NetworkNodes(ctx, req.(*NetworkNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_NetworkEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkEdgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).NetworkEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_NetworkEdges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).NetworkEdges(ctx, req.(*NetworkEdgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_NetworkNodeConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNodeConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).NetworkNodeConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_NetworkNodeConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).NetworkNodeConfigure(ctx, req.(*NetworkNodeConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meshmesh_NetworkNodeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshmeshServer).NetworkNodeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meshmesh_NetworkNodeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshmeshServer).NetworkNodeDelete(ctx, req.(*NetworkNodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Meshmesh_ServiceDesc is the grpc.ServiceDesc for Meshmesh service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meshmesh_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshmesh.Meshmesh",
	HandlerType: (*MeshmeshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Meshmesh_SayHello_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _Meshmesh_NodeInfo_Handler,
		},
		{
			MethodName: "NodeReboot",
			Handler:    _Meshmesh_NodeReboot_Handler,
		},
		{
			MethodName: "BindClear",
			Handler:    _Meshmesh_BindClear_Handler,
		},
		{
			MethodName: "SetTag",
			Handler:    _Meshmesh_SetTag_Handler,
		},
		{
			MethodName: "SetChannel",
			Handler:    _Meshmesh_SetChannel_Handler,
		},
		{
			MethodName: "EntitiesCount",
			Handler:    _Meshmesh_EntitiesCount_Handler,
		},
		{
			MethodName: "EntityHash",
			Handler:    _Meshmesh_EntityHash_Handler,
		},
		{
			MethodName: "GetEntityState",
			Handler:    _Meshmesh_GetEntityState_Handler,
		},
		{
			MethodName: "SetEntityState",
			Handler:    _Meshmesh_SetEntityState_Handler,
		},
		{
			MethodName: "ExecuteDiscovery",
			Handler:    _Meshmesh_ExecuteDiscovery_Handler,
		},
		{
			MethodName: "NetworkNodes",
			Handler:    _Meshmesh_NetworkNodes_Handler,
		},
		{
			MethodName: "NetworkEdges",
			Handler:    _Meshmesh_NetworkEdges_Handler,
		},
		{
			MethodName: "NetworkNodeConfigure",
			Handler:    _Meshmesh_NetworkNodeConfigure_Handler,
		},
		{
			MethodName: "NetworkNodeDelete",
			Handler:    _Meshmesh_NetworkNodeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshmesh/meshmesh.proto",
}
