syntax = "proto3";

option go_package = "leguru.net/m/v2/rpc/meshmesh";
option java_multiple_files = true;
option java_package = "leguru.net.meshmesh";
option java_outer_classname = "MeshmeshProto";

package meshmesh;

enum EntityType {
  ALL = 0;
  SENSOR = 1;
  BINARY_SENSOR = 2;
  SWITCH = 3;
  LIGHT = 4;
  TEXT_SENSOR = 5;
}

// The greeting service definition.
service Meshmesh {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc NodeInfo (NodeInfoRequest) returns (NodeInfoReply) {}
  rpc NodeReboot (NodeRebootRequest) returns (NodeRebootReply) {}
  rpc BindClear (BindClearRequest) returns (BindClearReply) {}
  rpc SetTag (SetTagRequest) returns (SetTagReply) {}
  rpc SetChannel (SetChannelRequest) returns (SetChannelReply) {}
  rpc EntitiesCount (EntitiesCountRequest) returns (EntitiesCountReply) {}
  rpc EntityHash (EntityHashRequest) returns (EntityHashReply) {}
  rpc GetEntityState (GetEntityStateRequest) returns (GetEntityStateReply) {}
  rpc SetEntityState (SetEntityStateRequest) returns (SetEntityStateReply) {}
  rpc ExecuteDiscovery (ExecuteDiscoveryRequest) returns (ExecuteDiscoveryReply) {}
  rpc NetworkNodes (NetworkNodesRequest) returns (NetworkNodesReply) {}
  rpc NetworkEdges (NetworkEdgesRequest) returns (NetworkEdgesReply) {}
  rpc NetworkNodeConfigure (NetworkNodeConfigureRequest) returns (NetworkNodeConfigureReply) {}
  rpc NetworkNodeDelete (NetworkNodeDeleteRequest) returns (NetworkNodeDeleteReply) {}
}

// The request message containing the user's name.
message HelloRequest {
}

// The response message containing the greetings
message HelloReply {
  string name = 1;
  string version = 2;
}

message NodeInfoRequest {
  uint32 id = 1;
}

message NodeInfoReply {
  uint32 id = 1;
  string tag = 2;
  uint32 channel = 3;
  string rev = 4;
  bool isAssociated = 5;
}

message NodeRebootRequest {
  uint32 id = 1;
}

message NodeRebootReply {
  bool success = 1;
}

message BindClearRequest {
  uint32 id = 1;
}

message BindClearReply {
  bool success = 1;
}

message SetTagRequest {
  uint32 id = 1;
  string tag = 2;
}

message SetTagReply {
  bool success = 1;
}

message SetChannelRequest {
  uint32 id = 1;
  uint32 channel = 2;
}

message SetChannelReply {
  bool success = 1;
}

message EntitiesCountRequest {
  uint32 id = 1;
}

message EntitiesCountReply {
  uint32 all = 1;
  uint32 sensors = 2;
  uint32 binarySensors = 3;
  uint32 switches = 4;
  uint32 lights = 5;
  uint32 textSensors = 6;
  uint32 analogSensors = 7;
}

message EntityHashRequest {
  uint32 id = 1;
  EntityType service = 2;
  uint32 index = 3;
}

message EntityHashReply {
  uint32 id = 1;
  uint32 hash = 2;
  string info = 3;
}

message GetEntityStateRequest {
  uint32 id = 1;
  EntityType service = 2;
  uint32 hash = 3;
}

message GetEntityStateReply {
  uint32 state = 1;
} 

message SetEntityStateRequest {
  uint32 id = 1;
  EntityType service = 2;
  uint32 hash = 3;
  uint32 state = 4;
}

message SetEntityStateReply {
  bool success = 1;
}

message ExecuteDiscoveryRequest {
  uint32 id = 1;
  optional uint32 num_slots = 2;
}

message ExecuteDiscoveryReply {
  bool success = 1;
}

message NetworkNodesRequest {
}

message NetworkNodesReply {
  repeated NetworkNode nodes = 1;
}

message NetworkEdgesRequest {
}

message NetworkEdgesReply {
  repeated NetworkEdge edges = 1;
}

message NetworkNode {
  uint32 id = 1;
  string tag = 2;
  bool inuse = 3;
}

message NetworkEdge {
  uint32 id = 1;
  uint32 from = 2;
  uint32 to = 3;
  float weight = 4;
}

message NetworkNodeConfigureRequest {
  uint32 id = 1;
  string tag = 2;
  bool inuse = 3;
}

message NetworkNodeConfigureReply {
  bool success = 1;
}

message NetworkNodeDeleteRequest {
  uint32 id = 1;
}

message NetworkNodeDeleteReply {
  bool success = 1;
}